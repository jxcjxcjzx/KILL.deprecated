
kill = {};

kill.parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = function(stmt) {return stmt},
        peg$c3 = null,
        peg$c4 = function(stmt, stmts) {return [stmt].concat(stmts)},
        peg$c5 = function(stmt) {return stmt;},
        peg$c6 = /^[^#\n]/,
        peg$c7 = { type: "class", value: "[^#\\n]", description: "[^#\\n]" },
        peg$c8 = function() {return [];},
        peg$c9 = function(q, i) {return [q,i]},
        peg$c10 = function(l, r) {return r ? ["op", r[0], l, r[1]] : l},
        peg$c11 = function(_if, cond, then, _else) {return [_if, cond, then, _else];},
        peg$c12 = function(e) {return e},
        peg$c13 = function(es) { return ["begin"].concat(es);},
        peg$c14 = function(f) {return f},
        peg$c15 = function(l, rs) { return rs.length? rs.reduce(function(l,r){return [l].concat(r);},l) : [l];},
        peg$c16 = function(let, bs) {return [let, bs];},
        peg$c17 = function(b) {return b;},
        peg$c18 = function(b, bs) {return [b].concat(bs);},
        peg$c19 = function(name, exp) {return [name, exp];},
        peg$c20 = function(ps, exp) {return ["lambda", ps?[ps]:[], exp];},
        peg$c21 = "\n",
        peg$c22 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c23 = "\\",
        peg$c24 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c25 = function(id) {return id;},
        peg$c26 = /^[_a-zA-Z]/,
        peg$c27 = { type: "class", value: "[_a-zA-Z]", description: "[_a-zA-Z]" },
        peg$c28 = function(id) {return ["if","let","begin", "then", "else"].indexOf(id.join("")) == -1 },
        peg$c29 = void 0,
        peg$c30 = function(id) { return id.join("");},
        peg$c31 = /^[0-9]/,
        peg$c32 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c33 = function(ds) {return parseInt(ds.join(""),10);},
        peg$c34 = "(",
        peg$c35 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c36 = ")",
        peg$c37 = { type: "literal", value: ")", description: "\")\"" },
        peg$c38 = function(e, es) {return es.length? [e].concat(es): [e];},
        peg$c39 = function() {return undefined;},
        peg$c40 = "true",
        peg$c41 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c42 = "false",
        peg$c43 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c44 = function(bool) {return bool == "true";},
        peg$c45 = "let",
        peg$c46 = { type: "literal", value: "let", description: "\"let\"" },
        peg$c47 = "if",
        peg$c48 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c49 = "then",
        peg$c50 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c51 = "else",
        peg$c52 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c53 = "begin",
        peg$c54 = { type: "literal", value: "begin", description: "\"begin\"" },
        peg$c55 = "#",
        peg$c56 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c57 = ":=",
        peg$c58 = { type: "literal", value: ":=", description: "\":=\"" },
        peg$c59 = "->",
        peg$c60 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c61 = /^[ \t]/,
        peg$c62 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c63 = ";",
        peg$c64 = { type: "literal", value: ";", description: "\";\"" },
        peg$c65 = ",",
        peg$c66 = { type: "literal", value: ",", description: "\",\"" },
        peg$c67 = "+",
        peg$c68 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c69 = "-",
        peg$c70 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c71 = "*",
        peg$c72 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c73 = "/",
        peg$c74 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c75 = "`",
        peg$c76 = { type: "literal", value: "`", description: "\"`\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsestmts();

      return s0;
    }

    function peg$parsestmts() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsestmt();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsedelim();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsestmt();
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c2(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsedelim();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestmt();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c2(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedelim();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestmt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseblank();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseblank();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselet();
        if (s2 === peg$FAILED) {
          s2 = peg$parseexp();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomment();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecomment();
        if (s0 === peg$FAILED) {
          s0 = [];
        }
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseblank();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseblank();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parset_comment();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c6.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c8();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexp() {
      var s0;

      s0 = peg$parseif();
      if (s0 === peg$FAILED) {
        s0 = peg$parseinfixexp();
      }

      return s0;
    }

    function peg$parseinfixexp() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parsebegin();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselexp();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseqop();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblank();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblank();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinfixexp();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c9(s3, s5);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parselexp() {
      var s0;

      s0 = peg$parselambda();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefexp();
      }

      return s0;
    }

    function peg$parseif() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parset_if();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblank();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefexp();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblank();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblank();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parset_then();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblank();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblank();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsefexp();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseblank();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseblank();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parset_else();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseblank();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseblank();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsefexp();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c11(s1, s3, s7, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebegin() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parset_begin();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseblank();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseblank();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenewline();
          if (s5 === peg$FAILED) {
            s5 = peg$c3;
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseblank();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblank();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexp();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c12(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseblank();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblank();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenewline();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblank();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblank();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexp();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c12(s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c13(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefexp() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseaexp();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblank();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseblank();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseblank();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseaexp();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c14(s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parseblank();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblank();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseaexp();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c14(s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c15(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaexp() {
      var s0;

      s0 = peg$parseliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifier();
        if (s0 === peg$FAILED) {
          s0 = peg$parsequote();
        }
      }

      return s0;
    }

    function peg$parselet() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parset_let();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblank();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebindings();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c16(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebindings() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebinding();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsesep();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseblank();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseblank();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsebinding();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c17(s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsesep();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseblank();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblank();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsebinding();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c17(s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c18(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebinding() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblank();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseop_assign();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblank();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblank();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexp();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c19(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselambda() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseparam();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblank();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseop_arrow();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblank();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblank();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenewline();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblank();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblank();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexp();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesep();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c3;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c20(s1, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenewline() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c21;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }

      return s0;
    }

    function peg$parseparam() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c25(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c26.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c26.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c28(s1);
        if (s2) {
          s2 = peg$c29;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c30(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedigits() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c31.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c31.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c33(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsequote() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c34;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexp();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseexp();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseexp();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c36;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c38(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseliteral() {
      var s0;

      s0 = peg$parsedigits();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebools();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunit();
        }
      }

      return s0;
    }

    function peg$parseunit() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c34;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblank();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c36;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebools() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c42) {
          s1 = peg$c42;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c44(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parset_let() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c45) {
        s0 = peg$c45;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }

      return s0;
    }

    function peg$parset_if() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c47) {
        s0 = peg$c47;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parset_then() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c49) {
        s0 = peg$c49;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }

      return s0;
    }

    function peg$parset_else() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c51) {
        s0 = peg$c51;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }

      return s0;
    }

    function peg$parset_begin() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c53) {
        s0 = peg$c53;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }

      return s0;
    }

    function peg$parset_comment() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 35) {
        s0 = peg$c55;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }

      return s0;
    }

    function peg$parseop_assign() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c57) {
        s0 = peg$c57;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      return s0;
    }

    function peg$parseop_arrow() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c59) {
        s0 = peg$c59;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }

      return s0;
    }

    function peg$parseblank() {
      var s0;

      if (peg$c61.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }

      return s0;
    }

    function peg$parsedelim() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 59) {
        s0 = peg$c63;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c21;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
      }

      return s0;
    }

    function peg$parsesep() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseblank();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseblank();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenewline();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblank();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblank();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseqop() {
      var s0, s1, s2, s3;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c67;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c69;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s0 = peg$c71;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s0 = peg$c73;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 96) {
                s1 = peg$c75;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseidentifier();
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 96) {
                    s3 = peg$c75;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();