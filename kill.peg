start = stmts
 
stmts = 
  stmt:stmt stmts:(delim stmt:stmt {return stmt})* delim?
  {return [stmt].concat(stmts)}
 
stmt = blank* stmt:(decl / exp) comment? {return stmt;} / comment /
 
comment = blank* t_comment [^#\n]+ {return [];}
 
decl = let
 
exp = 
  if / begin / set / squote / infixexp

infixexp = 
  l:lexp
    {return l}

lexp = 
  lambda /
  fexp
 
if = 
  _if:t_if blank* cond:fexp blank* t_then blank* then:fexp blank* t_else blank* _else:fexp 
  {return [_if, cond, then, _else];}
 
begin = 
  t_begin es:(blank* newline? blank* "(" e:exp ")" {return e})+ blank* newline?  blank* delim
  { return ["begin"].concat(es);}
 
fexp = 
  l:aexp blank* rs:(blank* f:aexp {return f})* 
  { return rs.length? rs.reduce(function(l,r){return [l].concat(r);},l) : [l];}
 
aexp = 
  literal /
  var /
  quote
 
let = let:t_let blank+ bs:bindings {return [let, bs];}
 
bindings = 
  b:binding bs:(sep blank* b:binding {return b;})*
  {return [b].concat(bs);}
 
binding = 
  name:identifier blank* op_assign blank* exp:exp
  {return [name, exp];}
 
lambda = 
  ps:param? blank* (op_arrow blank* newline?) blank* exp:exp sep?
  {return ["lambda", ps?[ps]:[], exp];} / 
  p:param blank+ exp:exp sep? {return ["lambda",[p],exp]} /
  p:param blank* l:lambda {return ["lambda",[p], l]}

set = set:t_set blank* id:identifier blank+ exp:exp 
  {return [set, id, exp];}

newline = "\n"
 
param = "\\" id:identifier {return id;}
 
identifier = 
  id:[_a-zA-Z?!+\-*/%\^\$\&]+ &{return ["if","let","begin", "then", "else", "set!", "--"].indexOf(id.join("")) == -1 }
  { return id.join("");}
 
var = identifier
 
digits = ds:[0-9]+ {return parseInt(ds.join(""),10);}

quote = "(" e:exp es:exp* ")" 
  {return es.length? [e].concat(es): [e];}

literal = digits / bools / unit

unit = "(" blank* ")" {return undefined;}
 
bools = bool:("true" / "false") {return bool == "true";}

squote = t_qt exp:exp {return ["quote"].concat(exp);}

t_qt = "'"

t_let = "let"
t_if = "if"
t_then = "then"
t_else = "else"
t_begin = "begin"
t_end = "end"
t_set = "set!"
t_comment = "--"
 
op_assign = ":="
 
op_arrow = "->"
 
blank = [ \t]
 
delim = ";" / "\n"
 
sep = blank* "," newline? blank*
 
qop = "+" / "-" / "*" / "/" /
  "`" identifier "`"